/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hbb;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;
import java.util.List;
import java.util.TimeZone;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYDataset;
import weka.classifiers.evaluation.NumericPrediction;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.timeseries.WekaForecaster;
import weka.core.Attribute;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.converters.ArffLoader;

/**
 *
 * @author hbbak
 */
public class MainFrame extends javax.swing.JFrame {

    File selectedFile;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        timeStampFieldCombobox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        startForecastButton = new javax.swing.JButton();
        chartPanel = new javax.swing.JPanel();
        mainMenu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openFileMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(640, 480));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jPanel1.setMinimumSize(new java.awt.Dimension(450, 43));
        jPanel1.setPreferredSize(new java.awt.Dimension(450, 100));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel2.setMinimumSize(new java.awt.Dimension(80, 33));
        jPanel2.setPreferredSize(new java.awt.Dimension(80, 33));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setText("Select Date Field");
        jPanel2.add(jLabel1);

        timeStampFieldCombobox.setMinimumSize(new java.awt.Dimension(150, 20));
        jPanel2.add(timeStampFieldCombobox);

        jLabel2.setText("Lag Period");
        jPanel2.add(jLabel2);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Daily", "Monthly", "Quarterly", "Yearly" }));
        jPanel2.add(jComboBox1);

        startForecastButton.setText("Start Forecast");
        startForecastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startForecastButtonActionPerformed(evt);
            }
        });
        jPanel2.add(startForecastButton);

        jPanel1.add(jPanel2);
        jPanel2.getAccessibleContext().setAccessibleDescription("");

        chartPanel.setMinimumSize(new java.awt.Dimension(400, 400));
        jPanel1.add(chartPanel);

        fileMenu.setText("File");

        openFileMenuItem.setText("Open File");
        openFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openFileMenuItem);
        openFileMenuItem.getAccessibleContext().setAccessibleName("");
        openFileMenuItem.getAccessibleContext().setAccessibleDescription("");

        mainMenu.add(fileMenu);

        setJMenuBar(mainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseClicked

    List<Attribute> getFieldsToForecast(File file) throws IOException {
        ForecastSelectionDialog dialog = new ForecastSelectionDialog(this, true, file);
        dialog.setTitle("Select Fields to Forecast");
        dialog.setVisible(true);
        if (dialog.getDialogResult() == JFileChooser.APPROVE_OPTION) {
            return dialog.getSelected();
        }
        return null;
    }

    String getTimeStampField(File file) throws IOException {
        ForecastSelectionDialog dialog = new ForecastSelectionDialog(this, true, file);
        dialog.attributeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        dialog.setTitle("Select Time Stamp Field");
        dialog.setVisible(true);
        if (dialog.getDialogResult() == JFileChooser.APPROVE_OPTION) {
            return dialog.getSelected().stream().map((attr) -> {
                return attr.name();
            }).collect(Collectors.joining(","));
        }
        return null;
    }

    void setDropDownSource(File file) throws IOException {
        ArffLoader loader = new ArffLoader();
        loader.setFile(file);
        Instances dataInstance = loader.getStructure();
        Enumeration<Attribute> attributes = dataInstance.enumerateAttributes();
        DefaultComboBoxModel<Attribute> model = new DefaultComboBoxModel<>();
        while (attributes.hasMoreElements()) {
            Attribute nextElement = attributes.nextElement();
            model.addElement(nextElement);
        }
        this.timeStampFieldCombobox.setModel(model);
    }

    private void openFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileMenuItemActionPerformed
        final JFileChooser fc = new JFileChooser();
        int dialogResult = fc.showOpenDialog(MainFrame.this);
        if (dialogResult == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            this.selectedFile = file;
            try {
                setDropDownSource(file); //"Fortified,Dry-white"
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        // we can continue to use the trained forecaster for further forecasting
        // by priming with the most recent historical data (as it becomes available).
        // At some stage it becomes prudent to re-build the model using current
        // historical data.
     }//GEN-LAST:event_openFileMenuItemActionPerformed

    private void startForecastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startForecastButtonActionPerformed
        // TODO add your handling code here:
        try {

            List<Attribute> forecastAttribute = getFieldsToForecast(this.selectedFile);
            if (forecastAttribute != null) {
                String fieldsToForecast = forecastAttribute.stream().map((attr) -> {
                    return attr.name();
                }).collect(Collectors.joining(",")); // load the wine data
                Instances dataInstance = new Instances(new BufferedReader(new FileReader(this.selectedFile.getAbsoluteFile())));

                // new forecaster
                WekaForecaster forecaster = new WekaForecaster();

                // set the targets we want to forecast. This method calls
                // setFieldsToLag() on the lag maker object for us
                forecaster.setFieldsToForecast(fieldsToForecast);

                // default underlying classifier is SMOreg (SVM) - we'll use
                // gaussian processes for regression instead
                forecaster.setBaseForecaster(new GaussianProcesses());
                Attribute timeStampField = (Attribute) this.timeStampFieldCombobox.getSelectedItem();
                if (timeStampField != null) {
                    forecaster.getTSLagMaker().setTimeStampField(timeStampField.name()); // date time stamp
                    forecaster.getTSLagMaker().setMinLag(1);
                    forecaster.getTSLagMaker().setMaxLag(12); // monthly data

                    // add a month of the year indicator field
                    forecaster.getTSLagMaker().setAddMonthOfYear(true);

                    // add a quarter of the year indicator field
                    forecaster.getTSLagMaker().setAddQuarterOfYear(true);

                    // build the model
                    forecaster.buildForecaster(dataInstance);

                    // prime the forecaster with enough recent historical data
                    // to cover up to the maximum lag. In our case, we could just supply
                    // the 12 most recent historical instances, as this covers our maximum
                    // lag period
                    forecaster.primeForecaster(dataInstance);
                    createChart(dataInstance, forecastAttribute);
                    // forecast for 12 units (months) beyond the end of the
                    // training data
                    createForecastChart(forecaster.forecast(12), forecastAttribute);
                    // output the predictions. Outer list is over the steps; inner list is over
                    // the targets
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_startForecastButtonActionPerformed
    void createForecastChart(List<List<NumericPrediction>> forecast, List<Attribute> forecastAttribute) {
        XYDataset dataset = createForecastDataSource(forecast, forecastAttribute);
        //TODO: Create chart
    }

    XYDataset createForecastDataSource(List<List<NumericPrediction>> forecast, List<Attribute> forecastAttribute) {
        //TODO: Create data source
        TimeSeriesCollection collection = new TimeSeriesCollection();
        for (Attribute attribute : forecastAttribute) {
            collection.addSeries(new TimeSeries(attribute.name()));
        }
        for (int i = 0; i < forecast.size(); i++) {
            List<NumericPrediction> predsAtStep = forecast.get(i);
            for (int j = 0; j < predsAtStep.size(); j++) {
                Attribute attr = forecastAttribute.get(j);
                // collection.getSeries(attr.name()).add();
                NumericPrediction predForTarget = predsAtStep.get(j);
                System.out.print("" + predForTarget.predicted() + " ");
            }
            System.out.println();
        }
        return collection;
    }

    void createChart(Instances dataInstance, List<Attribute> forecastAttribute) throws Exception {
        XYDataset dataset = createXYData(dataInstance, forecastAttribute);
        JFreeChart chart = ChartFactory.createTimeSeriesChart("Times goes one", "Date", "Values", dataset, true, true, false);

        final ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new java.awt.Dimension(560, 370));
        chartPanel.setMouseZoomable(true, false);
        this.chartPanel.add(chartPanel);
        this.chartPanel.setVisible(true);
        this.revalidate();
        this.repaint();
        //airlines tarih ve pessenger
        //wine x tarih, y 
    }

    private XYDataset createXYData(Instances dataInstance, List<Attribute> forecastAttribute) throws ParseException {
        TimeSeriesCollection collection = new TimeSeriesCollection();
        for (Attribute attribute : forecastAttribute) {
            collection.addSeries(new TimeSeries(attribute.name()));
        }

        Attribute dateField = (Attribute) this.timeStampFieldCombobox.getSelectedItem();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        for (Instance instance : dataInstance) {
            Date date = dateFormat.parse(instance.stringValue(dateField));
            RegularTimePeriod period = RegularTimePeriod.createInstance(Second.class, date, TimeZone.getDefault());
            for (Attribute attribute : forecastAttribute) {
                collection.getSeries(attribute.name()).add(period, instance.value(attribute));
            }
        }
        return collection;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chartPanel;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JMenuBar mainMenu;
    private javax.swing.JMenuItem openFileMenuItem;
    private javax.swing.JButton startForecastButton;
    private javax.swing.JComboBox<weka.core.Attribute> timeStampFieldCombobox;
    // End of variables declaration//GEN-END:variables
}
